@using Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Web
@using Umbraco.Cms.Core.Models
@using Umbraco.Cms.Core.Services
@using Umbraco.Cms.Core
@using Umbraco.Extensions // For .Url(), .GetUrl(), and other extension methods
@inject Umbraco.Cms.Web.Common.UmbracoHelper Umbraco
@inject IUmbracoContextAccessor UmbracoContextAccessor
@inject IMemberService MemberService
@inject IRelationService RelationService
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
	Layout = null;
    var memberMediaGalleryPage = Model as MemberMediaGallery; // Cast if using ModelsBuilder

    IMember associatedMember = null;
    IEnumerable<IMedia> uploadedMedia = Enumerable.Empty<IMedia>();
    string errorMessage = null;

    if (memberMediaGalleryPage != null)
    {
        // --- START DEBUGGING MEMBER RETRIEVAL ---
        // Attempt to get the associated member directly as IPublishedContent
        // Member Picker property values are typically exposed as IPublishedContent (or IEnumerable<IPublishedContent> for multiple)
        var publishedAssociatedMember = memberMediaGalleryPage.Value<IPublishedContent>("associatedMember");

        // Log the retrieved published member for debugging
        Console.WriteLine($"DEBUG: Published Associated Member: {publishedAssociatedMember?.Name ?? "NULL"} (ID: {publishedAssociatedMember?.Id.ToString() ?? "NULL"})");
        Console.WriteLine($"DEBUG: Published Associated Member Key: {publishedAssociatedMember?.Key.ToString() ?? "NULL"}");


        if (publishedAssociatedMember != null)
        {
            // Use the Key (Guid) from IPublishedContent to get the IMember object
            associatedMember = MemberService.GetByKey(publishedAssociatedMember.Key);

            if (associatedMember != null)
            {
                // Now proceed with relation fetching as the member is successfully retrieved
                // Get the 'userUploads' relation type
                IRelationType relationType = RelationService.GetRelationTypeByAlias("userUploads");

                if (relationType != null)
                {
                    // Get all relations where the current member is the parent and media is the child
                    var relations = RelationService.GetByParentId(associatedMember.Id)
                                                  .Where(r => r.RelationType.Alias == "userUploads" && r.ChildObjectType == Constants.ObjectTypes.Media);

                    var mediaItems = new List<IMedia>();
                    foreach (var id in relations.Select(r => r.ChildId).Distinct().ToList())
                    {
                        var mediaItem = mediaService.GetById(id); // Using the injected mediaService
                        if (mediaItem != null)
                        {
                            mediaItems.Add(mediaItem);
                        }
                    }
                    uploadedMedia = mediaItems;
                }
                else
                {
                    errorMessage = "Error: 'userUploads' relation type not found. Please ensure it's created in Umbraco settings or programmatically.";
                }
            }
            else
            {
                errorMessage = "Error: Associated Member found in content, but IMember object not retrieved via Key. Member might be unpublished or deleted.";
            }
        }
        else
        {
            // This condition is hit if no member is selected in the picker on the page
            errorMessage = "No associated member selected for this gallery page.";
        }
        // --- END DEBUGGING MEMBER RETRIEVAL ---
    }
    else
    {
        errorMessage = "Could not cast Model to MemberMediaGallery. Ensure ModelsBuilder is enabled and the Document Type alias is correct.";
    }
}

<!-- Bootstrap CSS CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" xintegrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<!-- Inter font (optional, if you still want it with Bootstrap) -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<style>
    body {
        font-family: 'Inter', sans-serif; /* Keep Inter font if desired */
        background-color: #f8fafc; /* Keep light background color */
    }

    .media-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .media-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }
</style>

<div class="container my-5 p-4 bg-white shadow-lg rounded">
    <h1 class="text-center mb-4 display-4 font-weight-bold">
        @if (associatedMember != null)
        {
            <span>@associatedMember.Name's Media Gallery</span>
        }
        else
        {
            <span>Media Gallery</span>
        }
    </h1>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error!</strong> @errorMessage
        </div>
    }
    else if (uploadedMedia.Any())
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var mediaItem in uploadedMedia)
            {
                // Corrected: Use Umbraco.Media(mediaItem.Id)?.Url() for reliable URL
                var imageUrl = Umbraco.Media(mediaItem.Id)?.Url();
                var fileName = mediaItem.Name;
                var mediaType = mediaItem.ContentType.Alias;

                <div class="col">
                    <div class="card h-100 border-0 shadow-sm media-card">
                        @if (!string.IsNullOrEmpty(imageUrl) && mediaType == Constants.Conventions.MediaTypes.Image)
                        {
                            <img src="@imageUrl" alt="@fileName" class="card-img-top" style="height: 180px; object-fit: cover;">
                        }
                        else if (!string.IsNullOrEmpty(imageUrl) && mediaType == Constants.Conventions.MediaTypes.File)
                        {
                            <div class="d-flex align-items-center justify-content-center bg-light text-muted p-4" style="height: 180px;">
                                <svg class="bi flex-shrink-0 me-2" width="48" height="48" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-1z" />
                                </svg>
                                <span>File: @fileName</span>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center bg-light text-muted p-4" style="height: 180px;">
                                <svg class="bi flex-shrink-0 me-2" width="48" height="48" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0V8.5H4a.5.5 0 0 1 0-1h3.5V4.5a.5.5 0 0 1 .5-.5z" />
                                </svg>
                                <span>@mediaType: @fileName</span>
                            </div>
                        }
                        <div class="card-body">
                            <h5 class="card-title text-dark mb-2 text-truncate">@fileName</h5>
                            <p class="card-text text-muted small mb-1">Type: @mediaType</p>
                            <p class="card-text text-muted small">Size: @(mediaItem.GetValue<long>("umbracoBytes") / 1024) KB</p>
                            <a href="@imageUrl" target="_blank" class="btn btn-sm btn-outline-primary mt-2">
                                View Original
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center text-muted fs-5 py-5">
            No media uploaded by this member yet.
        </p>
    }
</div>

<!-- Bootstrap JS CDN (optional, for components requiring JS like dropdowns, tooltips etc.) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" xintegrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

@functions {
    // Helper method to get IMediaService from services container in Razor views.
    // This is generally safe to do in Razor views for read operations.
    public IMediaService mediaService => Context.RequestServices.GetRequiredService<IMediaService>();
}

