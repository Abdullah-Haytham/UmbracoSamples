{"version":3,"file":"client.js","sources":["../../../client/src/my-element.ts"],"sourcesContent":["import {\n    LitElement,\n    html,\n    customElement,\n    state,\n    css,\n} from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\nimport {\n    UmbNotificationContext,\n    UMB_NOTIFICATION_CONTEXT,\n} from \"@umbraco-cms/backoffice/notification\";\n\n// Define TypeScript interfaces to match your C# models\ninterface ITodoList {\n    id: string; // Guid maps to string in TypeScript\n    name: string;\n    allowedUsers: ITodoListAllowedUser[]; // Navigation property for the linking table\n    todoItems: ITodoItem[]; // Navigation property for todo items\n}\n\ninterface ITodoListAllowedUser {\n    todoListId: string;\n    userGuid: string;\n}\n\ninterface ITodoItem {\n    id: string;\n    description: string;\n    isCompleted: boolean;\n    completedByUserId?: string | null; // Nullable Guid\n    todoListId: string;\n}\n\n// Frontend DTO for simplified user data\ninterface ISimpleUserDto {\n    id: string; // User GUID\n    name: string; // User name\n}\n\n@customElement('my-typescript-element')\nexport default class MyTypeScriptElement extends UmbElementMixin(LitElement) {\n    // Inject the notification context for displaying messages\n    private notificationContext?: UmbNotificationContext;\n\n    // State to hold the list of todo lists fetched from the API\n    @state()\n    private todoLists: ITodoList[] = [];\n\n    // State for the input field when creating a new todo list\n    @state()\n    private newTodoListName: string = '';\n\n    // State: Array to hold descriptions for new todo items to be added with the new list\n    @state()\n    private newItemsForNewList: string[] = ['']; // Start with one empty input field\n\n    // NEW STATE: List of all available users fetched from the backend\n    @state()\n    private availableUsers: ISimpleUserDto[] = [];\n\n    // NEW STATE: List of selected user GUIDs for the new todo list\n    @state()\n    private selectedAllowedUserIds: string[] = [];\n\n    // State to indicate loading status for UI feedback\n    @state()\n    private loading: boolean = false;\n\n    // State to hold any error messages\n    @state()\n    private error: string | null = null;\n\n    @state()\n    private userDropdownOpen: boolean = false;\n\n    constructor() {\n        super();\n        // Consume the notification context to show success/error messages\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\n            this.notificationContext = _instance;\n        });\n    }\n\n    // Lifecycle method called after the first update, good for initial data fetching\n    firstUpdated() {\n        this.fetchTodoLists();\n        this.fetchAvailableUsers(); // Fetch users when the component starts\n    }\n\n    // Styles for the component\n    static styles = [\n        css`\n            :host {\n                display: block;\n                padding: var(--uui-size-layout-1);\n            }\n\n            .todo-section {\n                margin-bottom: var(--uui-size-layout-1);\n                padding: var(--uui-size-space-5);\n                border: 1px solid var(--uui-color-border);\n                border-radius: var(--uui-border-radius);\n                background-color: var(--uui-color-surface);\n            }\n\n            .todo-section:not(:last-child) {\n                margin-bottom: var(--uui-size-layout-1);\n            }\n\n            .add-todo-list-form { /* Changed class name for clarity */\n                display: flex;\n                flex-direction: column; /* Stack elements vertically */\n                gap: var(--uui-size-space-3);\n                margin-top: var(--uui-size-space-5);\n            }\n\n            .add-todo-list-form uui-input,\n            .add-todo-list-form uui-select { /* Added uui-select */\n                width: 100%;\n            }\n\n            .todo-list-item-header {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                padding: var(--uui-size-3) var(--uui-size-4);\n                background-color: var(--uui-color-background-alt);\n                border-bottom: 1px solid var(--uui-color-border);\n                border-radius: var(--uui-border-radius) var(--uui-border-radius) 0 0;\n            }\n\n            .todo-items-container {\n                padding: var(--uui-size-4);\n            }\n\n            .todo-item {\n                display: flex;\n                align-items: center;\n                gap: var(--uui-size-3);\n                padding: var(--uui-size-2) 0;\n                border-bottom: 1px dashed var(--uui-color-border-alt);\n            }\n\n            .todo-item:last-child {\n                border-bottom: none;\n            }\n\n            .todo-item.completed .description {\n                text-decoration: line-through;\n                color: var(--uui-color-text-alt);\n            }\n\n            .no-todos {\n                padding: var(--uui-size-5);\n                text-align: center;\n                color: var(--uui-color-text-alt);\n            }\n\n            h3 {\n                margin-top: 0;\n                margin-bottom: var(--uui-size-3);\n            }\n\n            .new-todo-items-section, .allowed-users-section {\n                border-top: 1px solid var(--uui-color-border-alt);\n                padding-top: var(--uui-size-space-4);\n                margin-top: var(--uui-size-space-4);\n            }\n            .new-todo-items-section h4, .allowed-users-section h4 {\n                margin-top: 0;\n                margin-bottom: var(--uui-size-space-3);\n            }\n\n            .new-todo-item-input-group {\n                display: flex;\n                gap: var(--uui-size-space-3);\n                margin-bottom: var(--uui-size-space-2);\n                align-items: center;\n            }\n            .new-todo-item-input-group uui-input {\n                flex-grow: 1;\n            }\n\n            .form-actions {\n                display: flex;\n                justify-content: flex-end;\n                gap: var(--uui-size-space-3);\n                margin-top: var(--uui-size-space-5);\n            }\n\n            .custom-multiselect {\n                position: relative;\n                width: 100%;\n            }\n\n            .multiselect-trigger {\n                width: 100%;\n                padding: var(--uui-size-space-3) var(--uui-size-space-4);\n                border: 1px solid var(--uui-color-border);\n                border-radius: var(--uui-border-radius);\n                background-color: var(--uui-color-surface);\n                color: var(--uui-color-text);\n                text-align: left;\n                cursor: pointer;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                font-family: inherit;\n                font-size: inherit;\n                transition: border-color 0.2s, box-shadow 0.2s;\n            }\n\n            .multiselect-trigger:hover:not(:disabled) {\n                border-color: var(--uui-color-border-emphasis);\n            }\n\n            .multiselect-trigger:focus {\n                outline: none;\n                border-color: var(--uui-color-focus);\n                box-shadow: 0 0 0 2px var(--uui-color-focus-standalone);\n            }\n\n            .multiselect-trigger:disabled {\n                opacity: 0.6;\n                cursor: not-allowed;\n            }\n\n            .selected-display {\n                flex-grow: 1;\n                color: var(--uui-color-text);\n            }\n\n            .multiselect-trigger:disabled .selected-display {\n                color: var(--uui-color-text-alt);\n            }\n\n            .dropdown-icon {\n                transition: transform 0.2s;\n                color: var(--uui-color-text-alt);\n            }\n\n            .dropdown-icon.open {\n                transform: rotate(180deg);\n            }\n\n            .multiselect-dropdown {\n                position: absolute;\n                top: 100%;\n                left: 0;\n                right: 0;\n                z-index: 1000;\n                background-color: var(--uui-color-surface);\n                border: 1px solid var(--uui-color-border);\n                border-radius: var(--uui-border-radius);\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n                max-height: 200px;\n                overflow-y: auto;\n                margin-top: 2px;\n            }\n\n            .user-option {\n                display: flex;\n                align-items: center;\n                gap: var(--uui-size-space-3);\n                padding: var(--uui-size-space-3) var(--uui-size-space-4);\n                cursor: pointer;\n                transition: background-color 0.2s;\n                border-bottom: 1px solid var(--uui-color-border-alt);\n            }\n\n            .user-option:last-child {\n                border-bottom: none;\n            }\n\n            .user-option:hover {\n                background-color: var(--uui-color-surface-alt);\n            }\n\n            .user-name {\n                flex-grow: 1;\n                color: var(--uui-color-text);\n            }\n\n            .no-users {\n                padding: var(--uui-size-space-4);\n                text-align: center;\n                color: var(--uui-color-text-alt);\n                font-style: italic;\n            }\n\n            .selected-users-display {\n                margin-top: var(--uui-size-space-3);\n            }\n\n            .selected-users-display small {\n                color: var(--uui-color-text-alt);\n                margin-bottom: var(--uui-size-space-2);\n                display: block;\n            }\n\n            .selected-users-tags {\n                display: flex;\n                flex-wrap: wrap;\n                gap: var(--uui-size-space-2);\n            }\n\n            .user-tag {\n                display: inline-flex;\n                align-items: center;\n                gap: var(--uui-size-space-2);\n                padding: var(--uui-size-space-1) var(--uui-size-space-3);\n                background-color: var(--uui-color-selected);\n                color: var(--uui-color-selected-contrast);\n                border-radius: calc(var(--uui-border-radius) / 2);\n                font-size: 0.875em;\n            }\n\n            .remove-user {\n                background: none;\n                border: none;\n                color: inherit;\n                cursor: pointer;\n                padding: 2px;\n                border-radius: 50%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                transition: background-color 0.2s;\n            }\n\n            .remove-user:hover:not(:disabled) {\n                background-color: rgba(255, 255, 255, 0.2);\n            }\n\n            .remove-user:disabled {\n                opacity: 0.6;\n                cursor: not-allowed;\n            }\n        `,\n    ];\n\n    /**\n     * Fetches all todo lists from the backend API.\n     */\n    async fetchTodoLists() {\n        this.loading = true;\n        this.error = null;\n        try {\n            const response = await fetch('/api/todos/all', {\n                credentials: 'include' // Crucial for sending cookies\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Failed to fetch todo lists: ${response.statusText} - ${errorText}`);\n            }\n            const data: ITodoList[] = await response.json();\n            this.todoLists = data;\n            console.log('Fetched Todo Lists:', this.todoLists);\n        } catch (err: any) {\n            this.error = err.message;\n            this.notificationContext?.peek(\"danger\", {\n                data: { message: `Error fetching todo lists: ${err.message}` },\n            });\n            console.error('Error fetching todo lists:', err);\n        } finally {\n            this.loading = false;\n        }\n    }\n\n    /**\n     * Fetches all available users from the backend API.\n     */\n    async fetchAvailableUsers() {\n        this.loading = true;\n        this.error = null;\n        try {\n            const response = await fetch('/api/users', { // New endpoint\n                credentials: 'include'\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Failed to fetch users: ${response.statusText} - ${errorText}`);\n            }\n            const data: ISimpleUserDto[] = await response.json();\n            this.availableUsers = data;\n            console.log('Fetched Available Users:', this.availableUsers);\n        } catch (err: any) {\n            this.error = err.message;\n            this.notificationContext?.peek(\"danger\", {\n                data: { message: `Error fetching users: ${err.message}` },\n            });\n            console.error('Error fetching users:', err);\n        } finally {\n            this.loading = false;\n        }\n    }\n\n    /**\n     * Handles the input change event for the new todo list name.\n     * @param event The input event.\n     */\n    onNewTodoListNameInput = (event: Event) => {\n        const input = event.target as HTMLInputElement;\n        this.newTodoListName = input.value;\n    };\n\n    /**\n     * Handles input changes for dynamic new todo item fields.\n     * @param index The index of the item in the array.\n     * @param event The input event.\n     */\n    onNewItemForNewListInput = (index: number, event: Event) => {\n        const input = event.target as HTMLInputElement;\n        const newArray = [...this.newItemsForNewList];\n        newArray[index] = input.value;\n        this.newItemsForNewList = newArray;\n    };\n\n    /**\n     * Adds a new empty input field for a todo item when creating a new list.\n     */\n    addTodoItemField() {\n        this.newItemsForNewList = [...this.newItemsForNewList, ''];\n    }\n\n    /**\n     * Removes a todo item input field from the new list creation form.\n     * @param index The index of the item to remove.\n     */\n    removeTodoItemField(index: number) {\n        if (this.newItemsForNewList.length > 1) {\n            const newArray = this.newItemsForNewList.filter((_, i) => i !== index);\n            this.newItemsForNewList = newArray;\n        } else {\n            this.newItemsForNewList = [''];\n        }\n    }\n\n    /**\n     * Handles changes in the allowed users multi-select.\n     * @param event The change event from uui-select.\n     */\n    onAllowedUsersSelectChange = (event: CustomEvent) => {\n        const selectElement = event.target as HTMLSelectElement; // Cast to HTMLSelectElement\n\n        // For uui-select with multiple=\"true\", the 'value' property on the actual UUI component\n        // should contain the array of selected values. event.detail.selection is also an option,\n        // but let's try direct .value access for reliability.\n        const selection = selectElement.value; // Get the value directly from the element\n\n        // Ensure selection is treated as an array of strings\n        if (Array.isArray(selection)) {\n            this.selectedAllowedUserIds = [...selection]; // Create a new array instance for reactivity\n            console.log('Selected Allowed User IDs:', this.selectedAllowedUserIds);\n        } else if (typeof selection === 'string' && selection !== '') {\n             // If only a single item is selected (and multiple is true), it might come as a string\n             // Ensure it's always an array for selectedAllowedUserIds\n             this.selectedAllowedUserIds = [selection];\n             console.log('Selected Allowed User IDs (single item):', this.selectedAllowedUserIds);\n        }\n        else {\n            this.selectedAllowedUserIds = []; // Reset if no valid selection\n            console.log('Selected Allowed User IDs: (Cleared/Invalid Selection) []');\n        }\n    };\n\n\n    /**\n     * Handles the creation of a new todo list including its initial items and allowed users.\n     */\n    async createTodoList() {\n        if (!this.newTodoListName.trim()) {\n            this.notificationContext?.peek(\"warning\", {\n                data: { message: \"Todo list name cannot be empty.\" },\n            });\n            return;\n        }\n\n        const itemsToCreate = this.newItemsForNewList.map(item => item.trim()).filter(item => item.length > 0);\n\n        this.loading = true;\n        this.error = null;\n        try {\n            const payload = {\n                name: this.newTodoListName,\n                todoItemDescriptions: itemsToCreate,\n                allowedUserIds: this.selectedAllowedUserIds,\n            };\n            console.log('Payload for Create Todo List:', payload);\n\n            const response = await fetch('/api/todos/create', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n                body: JSON.stringify(payload),\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Failed to create todo list: ${response.statusText} - ${errorText}`);\n            }\n\n            this.notificationContext?.peek(\"positive\", {\n                data: { message: `Todo list \"${this.newTodoListName}\" created successfully!` },\n            });\n\n            // Reset form state\n            this.newTodoListName = '';\n            this.newItemsForNewList = [''];\n            this.selectedAllowedUserIds = [];\n            this.userDropdownOpen = false; // Close the dropdown\n            \n            await this.fetchTodoLists();\n        } catch (err: any) {\n            this.error = err.message;\n            this.notificationContext?.peek(\"danger\", {\n                data: { message: `Error creating todo list: ${err.message}` },\n            });\n            console.error('Error creating todo list:', err);\n        } finally {\n            this.loading = false;\n        }\n    }\n\n    /**\n     * Toggles the completion status of a specific TodoItem.\n     * @param todoListId The ID of the parent TodoList.\n     * @param todoItemId The ID of the TodoItem to update.\n     * @param currentStatus The current completion status of the TodoItem.\n     */\n    async toggleTodoItemCompletion(todoListId: string, todoItemId: string, currentStatus: boolean) {\n        this.loading = true;\n        this.error = null;\n        try {\n            const newStatus = !currentStatus;\n            const response = await fetch('/api/todos/toggle-completion', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',\n                body: JSON.stringify({\n                    id: todoItemId,\n                    todoListId: todoListId,\n                    isCompleted: newStatus,\n                }),\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Failed to update todo item: ${response.statusText} - ${errorText}`);\n            }\n\n            this.notificationContext?.peek(\"positive\", {\n                data: { message: `Todo item status updated!` },\n            });\n\n            await this.fetchTodoLists();\n        } catch (err: any) {\n            this.error = err.message;\n            this.notificationContext?.peek(\"danger\", {\n                data: { message: `Error updating todo item: ${err.message}` },\n            });\n            console.error('Error updating todo item:', err);\n        } finally {\n            this.loading = false;\n        }\n    }\n\n    toggleUserDropdown = () => {\n        this.userDropdownOpen = !this.userDropdownOpen;\n    };\n\n    /**\n     * Handles checkbox changes for user selection\n     */\n    onUserCheckboxChange = (userId: string, isChecked: boolean) => {\n        if (isChecked) {\n            if (!this.selectedAllowedUserIds.includes(userId)) {\n                this.selectedAllowedUserIds = [...this.selectedAllowedUserIds, userId];\n            }\n        } else {\n            this.selectedAllowedUserIds = this.selectedAllowedUserIds.filter(id => id !== userId);\n        }\n        console.log('Updated selectedAllowedUserIds:', this.selectedAllowedUserIds);\n    };\n\n    /**\n     * Removes a selected user from the selection\n     */\n    removeSelectedUser = (userId: string) => {\n        this.selectedAllowedUserIds = this.selectedAllowedUserIds.filter(id => id !== userId);\n        console.log('Removed user, updated selectedAllowedUserIds:', this.selectedAllowedUserIds);\n    };\n\n\n    render() {\n        // Console log here to check value before rendering\n        console.log('Rendering with selectedAllowedUserIds:', this.selectedAllowedUserIds);\n\n        return html`\n            <uui-box headline=\"Todo Lists Dashboard\">\n                <p>Manage your personal todo lists.</p>\n\n                <div class=\"todo-section\">\n                    <h3>Create New Todo List</h3>\n                    <div class=\"add-todo-list-form\">\n                        <uui-input\n                            label=\"Todo List Name\"\n                            placeholder=\"e.g., Groceries, Work Tasks\"\n                            .value=${this.newTodoListName}\n                            @input=${this.onNewTodoListNameInput}\n                            .disabled=${this.loading}\n                        ></uui-input>\n\n                        <div class=\"allowed-users-section\">\n                            <h4>Allowed Users</h4>\n                            <div class=\"custom-multiselect\">\n                                <button \n                                    class=\"multiselect-trigger\"\n                                    type=\"button\"\n                                    @click=${this.toggleUserDropdown}\n                                    .disabled=${this.loading || this.availableUsers.length === 0}\n                                >\n                                    <span class=\"selected-display\">\n                                        ${this.selectedAllowedUserIds.length === 0 \n                                            ? 'Select users to allow access'\n                                            : `${this.selectedAllowedUserIds.length} user${this.selectedAllowedUserIds.length !== 1 ? 's' : ''} selected`\n                                        }\n                                    </span>\n                                    <uui-icon name=\"icon-chevron-down\" class=\"dropdown-icon ${this.userDropdownOpen ? 'open' : ''}\"></uui-icon>\n                                </button>\n                                \n                                ${this.userDropdownOpen ? html`\n                                    <div class=\"multiselect-dropdown\">\n                                        ${this.availableUsers.length === 0 ? html`\n                                            <div class=\"no-users\">No users available</div>\n                                        ` : this.availableUsers.map(user => html`\n                                            <label class=\"user-option\">\n                                                <uui-checkbox\n                                                    .checked=${this.selectedAllowedUserIds.includes(user.id)}\n                                                    @change=${(e: Event) => this.onUserCheckboxChange(user.id, (e.target as any).checked)}\n                                                    .disabled=${this.loading}\n                                                ></uui-checkbox>\n                                                <span class=\"user-name\">${user.name}</span>\n                                            </label>\n                                        `)}\n                                    </div>\n                                ` : ''}\n                            </div>\n                            \n                            <!-- Show selected users -->\n                            ${this.selectedAllowedUserIds.length > 0 ? html`\n                                <div class=\"selected-users-display\">\n                                    <small>Selected users:</small>\n                                    <div class=\"selected-users-tags\">\n                                        ${this.selectedAllowedUserIds.map(userId => {\n                                            const user = this.availableUsers.find(u => u.id === userId);\n                                            return user ? html`\n                                                <span class=\"user-tag\">\n                                                    ${user.name}\n                                                    <button \n                                                        type=\"button\" \n                                                        class=\"remove-user\"\n                                                        @click=${() => this.removeSelectedUser(userId)}\n                                                        .disabled=${this.loading}\n                                                    >\n                                                        <uui-icon name=\"icon-remove\"></uui-icon>\n                                                    </button>\n                                                </span>\n                                            ` : '';\n                                        })}\n                                    </div>\n                                </div>\n                            ` : ''}\n                        </div>\n\n                        <div class=\"new-todo-items-section\">\n                            <h4>Initial Todo Items (Optional)</h4>\n                            ${this.newItemsForNewList.map((item, index) => html`\n                                <div class=\"new-todo-item-input-group\">\n                                    <uui-input\n                                        label=${`Item ${index + 1}`}\n                                        placeholder=\"e.g., Buy milk\"\n                                        .value=${item}\n                                        @input=${(e: Event) => this.onNewItemForNewListInput(index, e)}\n                                        .disabled=${this.loading}\n                                    ></uui-input>\n                                    ${this.newItemsForNewList.length > 1 ? html`\n                                        <uui-button\n                                            compact\n                                            look=\"secondary\"\n                                            label=\"Remove\"\n                                            @click=${() => this.removeTodoItemField(index)}\n                                            .disabled=${this.loading}\n                                        >\n                                            <uui-icon name=\"icon-trash\"></uui-icon>\n                                        </uui-button>\n                                    ` : ''}\n                                </div>\n                            `)}\n                            <uui-button\n                                compact\n                                look=\"outline\"\n                                label=\"Add another item\"\n                                @click=${this.addTodoItemField}\n                                .disabled=${this.loading}\n                                style=\"margin-top: var(--uui-size-space-3);\"\n                            >\n                                <uui-icon name=\"icon-add\"></uui-icon>\n                            </uui-button>\n                        </div>\n\n                        <div class=\"form-actions\">\n                            <uui-button\n                                look=\"primary\"\n                                label=\"Create List\"\n                                @click=${this.createTodoList}\n                                .loading=${this.loading}\n                                .disabled=${!this.newTodoListName.trim() || this.loading}\n                            ></uui-button>\n                        </div>\n                    </div>\n                    ${this.error ? html`<p style=\"color: var(--uui-color-danger-standalone);\">${this.error}</p>` : ''}\n                </div>\n\n                <div class=\"todo-section\">\n                    <h3>Your Todo Lists</h3>\n                    ${this.loading && this.todoLists.length === 0\n                        ? html`<uui-loader-circle></uui-loader-circle><p>Loading todo lists...</p>`\n                        : this.todoLists.length > 0\n                            ? html`\n                                <uui-card-list>\n                                    ${this.todoLists.map((list) => html`\n                                        <uui-card>\n                                            <div class=\"todo-list-item-header\">\n                                                <strong>${list.name}</strong>\n                                                <small>${list.todoItems.filter(item => item.isCompleted).length} / ${list.todoItems.length} items completed</small>\n                                            </div>\n                                            <div class=\"todo-items-container\">\n                                                ${list.todoItems.length > 0\n                                                    ? list.todoItems.map(item => html`\n                                                        <div class=\"todo-item ${item.isCompleted ? 'completed' : ''}\">\n                                                            <uui-checkbox\n                                                                .checked=${item.isCompleted}\n                                                                @change=${() => this.toggleTodoItemCompletion(list.id, item.id, item.isCompleted)}\n                                                                .disabled=${this.loading}\n                                                            ></uui-checkbox>\n                                                            <span class=\"description\">${item.description}</span>\n                                                        </div>\n                                                    `)\n                                                    : html`<p class=\"no-todos\">No items in this list yet.</p>`\n                                                }\n                                            </div>\n                                        </uui-card>\n                                    `)}\n                                </uui-card-list>\n                            `\n                            : html`<p class=\"no-todos\">No todo lists found. Create one above!</p>`\n                    }\n                </div>\n            </uui-box>\n        `;\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'my-typescript-element': MyTypeScriptElement;\n    }\n}\n"],"names":["MyTypeScriptElement","UmbElementMixin","LitElement","event","input","index","newArray","selection","userId","isChecked","id","UMB_NOTIFICATION_CONTEXT","_instance","response","errorText","data","err","_a","_","itemsToCreate","item","payload","_b","_c","todoListId","todoItemId","currentStatus","html","user","u","e","list","css","__decorateClass","state","customElement"],"mappings":"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"}